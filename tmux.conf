#
# server options
#
set -s default-terminal "tmux-256color"
set -s escape-time 0
set -s exit-empty off
set -s focus-events on

# for image support
set -gq allow-passthrough on
set -g visual-activity off

# for undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

#
# session options
#
set -g default-command "exec /bin/zsh"
set -g destroy-unattached off
set -g detach-on-destroy no-detached
set -g display-time 4000
set -g history-limit 50000
set -g renumber-windows on
#set -g status-interval 5

# look and feel (powerline-based)
set -g message-style fg=colour16,bg=colour221,bold
# set -g status-style fg=white,bg=colour234
set -g status-keys emacs # better for command prompt even for VIM users
set-option -g status-position top


#
# window options
#
set -g mode-keys vi

# look and feel
set -g pane-active-border-style fg=colour39
set -g pane-border-indicators arrows
set -g pane-border-lines heavy
set -g pane-border-status off
set -g pane-border-style fg=colour245
set -g window-status-activity-style bold
# defined in tmux-powerline plugin
# set -g window-status-format "#[fg=white,bg=colour234] #I #W "
# set -g window-status-current-format "#[fg=colour234,bg=colour39]#[fg=colour25,bg=colour39,noreverse,bold] #I  #W #[fg=colour39,bg=colour234,nobold]"


#
# pane options
#
# ... none overridden


#
# keybindings
#
bind -n M-? list-keys
bind -n M-% source-file ~/.tmux.conf
bind -n M-\; command-prompt
bind -n M-c copy-mode
bind -n M-v paste-buffer

# scripts
source-file "~/.config/tmux/local/tmux-scripts.sh"

# session management
bind -n M-t display-popup -E "~/.config/tmux/tmux-sessionizer.sh"
# toggle last session
bind -n M-y switch-client -l
bind -n M-d detach

# window/pane management
bind -n M-n new-window
bind -n M-! break-pane

# connect a pane to another window
bind -n M-@ command-prompt -p "join pane to:" "join-pane -t ':%%'"

# toggle piping pane output to a file
bind -n M-r command-prompt -p "Log output to:" "pipe-pane -o 'cat >>%%.#I-#P'"
bind -n M-R pipe-pane

bind -n M-& kill-window
bind -n M-, command-prompt -p "Rename window to:" "rename-window %%"
bind -n M-< command-prompt -p "Rename session to:" "rename-session %%"

bind -n M-o rotate-window
bind -n M-> next-layout
bind -n M-0 select-window -t :0
bind -n M-1 select-window -t :1
bind -n M-2 select-window -t :2
bind -n M-3 select-window -t :3
bind -n M-4 select-window -t :4
bind -n M-5 select-window -t :5
bind -n M-6 select-window -t :6
bind -n M-7 select-window -t :7
bind -n M-8 select-window -t :8
bind -n M-9 select-window -t :9

# easier resizing
bind -n M-H resize-pane -L 5
bind -n M-J resize-pane -D 5
bind -n M-K resize-pane -U 5
bind -n M-L resize-pane -R 5

# easier splits
bind -n M-v split-window -h
bind -n M-s split-window -v

# Smart pane switching with awareness of Neovim splits.
# - using nvim plugin https://github.com/mrjones2014/smart-splits.nvim
# bind -n M-h select-pane -L
# bind -n M-j select-pane -D
# bind -n M-k select-pane -U
# bind -n M-l select-pane -R
bind-key -n M-h if -F "#{@pane-is-vim}" 'send-keys M-h'  'select-pane -L'
bind-key -n M-j if -F "#{@pane-is-vim}" 'send-keys M-j'  'select-pane -D'
bind-key -n M-k if -F "#{@pane-is-vim}" 'send-keys M-k'  'select-pane -U'
bind-key -n M-l if -F "#{@pane-is-vim}" 'send-keys M-l'  'select-pane -R'

# Alternatively, if you want to disable wrapping when moving in non-neovim panes, use these bindings
# bind-key -n C-h if -F '#{@pane-is-vim}' { send-keys C-h } { if -F '#{pane_at_left}'   '' 'select-pane -L' }
# bind-key -n C-j if -F '#{@pane-is-vim}' { send-keys C-j } { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
# bind-key -n C-k if -F '#{@pane-is-vim}' { send-keys C-k } { if -F '#{pane_at_top}'    '' 'select-pane -U' }
# bind-key -n C-l if -F '#{@pane-is-vim}' { send-keys C-l } { if -F '#{pane_at_right}'  '' 'select-pane -R' }

# Smart pane resizing with awareness of Neovim splits.
bind-key -n M-H if -F "#{@pane-is-vim}" 'send-keys M-H' 'resize-pane -L 5'
bind-key -n M-J if -F "#{@pane-is-vim}" 'send-keys M-J' 'resize-pane -D 5'
bind-key -n M-K if -F "#{@pane-is-vim}" 'send-keys M-K' 'resize-pane -U 5'
bind-key -n M-L if -F "#{@pane-is-vim}" 'send-keys M-L' 'resize-pane -R 5'

# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R
# bind-key -T copy-mode-vi 'M-\' select-pane -l
# end smart-splits.nvim plugin

#
# plugins
#
set -g @plugin 'tmux-plugins/tpm'

# TAB - toggle sidebar
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @sidebar-tree-position 'right'
set -g @sidebar-tree-command 'tree -F -C --dirsfirst -I "node_modules|build|public"'

# Z - toggle zoom panel
set -g @plugin 'jaclu/tmux-power-zoom'

# powerline statusline
set -g @plugin 'erikw/tmux-powerline'

run "~/.config/tmux/plugins/tpm/tpm"

# vim: ft=tmux
